#include <stdio.h>
extern void initialize_graph();
extern void connect_routers(int id1,int id2,int trans_cost);
extern void connect_node_to_router(int new_node_id,int new_router_id);
extern void find_shorest_path_between_routers(int router_1,int router_2);	//returns the array of router ids through which the message should pass.
extern void print_neighbours();


//returns the first number it finds after start and the index of the next white space.
int extract_int(char *buffer,int start){
	int i=start;
	while(buffer[i]==' '||buffer[i] =='\t')i++;
	char number[10];
	int j=0;
	while(buffer[i]!=' '||buffer[i] =='\t'){
		number[j]=buffer[i];
		j++;
		i++;
	}
	number[j]='\0';
	int return_values[2];
	return atoi(number);
	
}

int next_char(char *buffer,int index){
	while(buffer[index]==' ' || buffer[index] =='\t')index++;
	return index;
}
void read_from_file(char *filename){
	FILE *file=fopen(filename,"r");
	int *temp;
	temp=(int *)malloc(sizeof(int)*2);
	int index;
	char c;
	int cost;
	int end_node_id;
	int new_router_id;
	int main_router_id;
	if(file!=NULL){
		char buffer[300];
		while(fgets(buffer,300,file)!=NULL){
			index=0;
			main_router_id=extract_int(buffer,0);
			while(buffer[index]!=' '||buffer[index]!='\t')index++;
			index=next_char(buffer,index);
			while(buffer[index]!='\0' ||buffer[index]!='\n'|| buffer[index]!='\r'){
				index=next_char(buffer,index);
				c=buffer[index++];
				if(c=='e'){
					end_node_id=extract_int(buffer,index);
					index=next_char(buffer,index);
					while(buffer[index]!=' '||buffer[index]!='\t')index++;
					connect_node_to_router(end_node_id,main_router_id);
				}
				else if(c=='r'){
					new_router_id=extract_int(buffer,index);
					index=next_char(buffer,index);
					while(buffer[index]!=' '||buffer[index]!='\t')index++;
					cost=extract_int(buffer,index);
					while(buffer[index]!=' '||buffer[index]!='\t')index++;
					connect_routers(main_router_id,new_router_id,cost);
				}
			}
		}
	}
	else puts("can't read from the file\n");


}
int main(int argc,char* argv[]){
	initialize_graph();
	char *filename="NetworkInput.txt";
	read_from_file(filename);
	



//	

//reading from a file.
/*
	connect_routers(1,2,8);
	connect_routers(2,5,20);
	connect_routers(2,4,6);
	connect_routers(3,5,4);
	connect_routers(3,4,7);
	connect_routers(2,1,8);
	connect_routers(5,2,20);
	connect_routers(4,2,6);
	connect_routers(5,3,4);
	connect_routers(4,3,7);
	//find_shorest_path_between_routers(1,5);
	puts("\n");
	find_shorest_path_between_routers(1,5);
	puts("\n");
	//find_shorest_path_between_routers(4,5);
	puts("\n");
	//print_neighbours();
*/
	return 0;
}